{"version":3,"sources":["components/Button.js","AuthContext/AuthContext.js","containers/MainCal.js","App.js","reportWebVitals.js","index.js"],"names":["Button","content","onButtonClicked","className","onClick","AuthContext","React","createContext","text","MainCal","useState","value","setValue","memory","setMemory","operator","setOperator","context","useContext","buttonClickedHandler","console","log","parseFloat","toString","type","readOnly","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04c86f47.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Button.css';\r\n//import AuthContext from '../AuthContext/AuthContext';\r\n\r\nconst Button = ({content, onButtonClicked})=> {\r\n\r\n//    const context = useContext(AuthContext);\r\n\r\n//    console.log(context.text);\r\n    return(\r\n        <div \r\n            className={`CalBlock ${content === \"=\" ? \"CalEqual\" : \"\"}`}\r\n            onClick={()=>onButtonClicked(content)}\r\n        >\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nconst AuthContext = React.createContext({\r\n    text: \"Hello from Context Box\"\r\n});\r\n\r\nexport default AuthContext;\r\n\r\n","import React,{useState,useContext} from 'react';\r\nimport {Fragment} from 'react';\r\nimport './MainCal.css'\r\nimport Button from '../components/Button';\r\nimport AuthContext from '../AuthContext/AuthContext';\r\n\r\nconst MainCal = () => {\r\n    const [value,setValue]=useState(\"0\");\r\n    const [memory, setMemory] = useState(null);\r\n    const [operator, setOperator] = useState(null);\r\n\r\n    const context = useContext(AuthContext);\r\n    const buttonClickedHandler = content => {\r\n\r\n        console.log(context.text);\r\n        if(content === \"c\"){\r\n            setValue(\"0\");\r\n            setMemory(null);\r\n            setOperator(null);\r\n            return;\r\n        }\r\n\r\n        if(content === \"+\"){\r\n            if( operator != null){\r\n                if(operator === \"+\"){\r\n                    setMemory(memory + parseFloat(value));\r\n                }else if(operator ===\"-\"){\r\n                    setMemory(memory - parseFloat(value));\r\n                }else if(operator ===\"x\"){\r\n                    setMemory(memory * parseFloat(value));\r\n                }else if(operator ===\"/\"){\r\n                    setMemory(memory / parseFloat(value));\r\n                }\r\n            }else{\r\n                setMemory(parseFloat(value));\r\n            } \r\n            setValue(\"0\");\r\n            setOperator(\"+\");\r\n            return;\r\n        }\r\n\r\n        if(content === \"-\"){\r\n            if( operator != null){\r\n                if(operator === \"+\"){\r\n                    setValue((memory + parseFloat(value)).toString());\r\n                }else if(operator ===\"-\"){\r\n                    setValue((memory - parseFloat(value)).toString());\r\n                }else if(operator ===\"x\"){\r\n                    setValue((memory * parseFloat(value)).toString());\r\n                }else if(operator ===\"/\"){\r\n                    setValue((memory / parseFloat(value)).toString());\r\n                }\r\n            }\r\n            setMemory(parseFloat(value));\r\n            setValue(\"0\");\r\n            setOperator(\"-\");\r\n            return;\r\n        }\r\n\r\n        if(content === \"x\"){\r\n            if( operator != null){\r\n                if(operator === \"+\"){\r\n                    setValue((memory + parseFloat(value)).toString());\r\n                }else if(operator ===\"-\"){\r\n                    setValue((memory - parseFloat(value)).toString());\r\n                }else if(operator ===\"x\"){\r\n                    setValue((memory * parseFloat(value)).toString());\r\n                }else if(operator ===\"/\"){\r\n                    setValue((memory / parseFloat(value)).toString());\r\n                }\r\n            }\r\n            setMemory(parseFloat(value));\r\n            setValue(\"0\");\r\n            setOperator(\"x\");\r\n            return;\r\n        }\r\n\r\n        if(content === \"/\"){\r\n            if( operator != null){\r\n                if(operator === \"+\"){\r\n                    setValue((memory + parseFloat(value)).toString());\r\n                }else if(operator ===\"-\"){\r\n                    setValue((memory - parseFloat(value)).toString());\r\n                }else if(operator ===\"x\"){\r\n                    setValue((memory * parseFloat(value)).toString());\r\n                }else if(operator ===\"/\"){\r\n                    setValue((memory / parseFloat(value)).toString());\r\n                }\r\n            }\r\n            setMemory(parseFloat(value));\r\n            setValue(\"0\");\r\n            setOperator(\"/\");\r\n            return;\r\n        }\r\n\r\n        if(content === \"=\"){\r\n            \r\n            if(!operator) return;\r\n            \r\n            if(operator === \"+\"){\r\n                setValue((memory + parseFloat(value)).toString());\r\n            }else if(operator ===\"-\"){\r\n                setValue((memory - parseFloat(value)).toString());\r\n            }else if(operator ===\"x\"){\r\n                setValue((memory * parseFloat(value)).toString());\r\n            }else if(operator ===\"/\"){\r\n                setValue((memory / parseFloat(value)).toString());\r\n            }\r\n\r\n            setOperator(null);\r\n            setMemory(null);\r\n            return;\r\n        }\r\n\r\n        setValue( (parseFloat(value) + content).toString() );\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"MainCalBody\">\r\n                <input  className = \"textField\" type=\"text\" readOnly value={value}/>\r\n                <Button onButtonClicked={buttonClickedHandler} content=\"1\"/>\r\n                <Button onButtonClicked={buttonClickedHandler} content=\"2\"/>\r\n                <Button onButtonClicked={buttonClickedHandler} content=\"3\"/>\r\n                <Button onButtonClicked={buttonClickedHandler} content=\"4\"/>\r\n                <Button onButtonClicked={buttonClickedHandler} content=\"5\"/>\r\n                <Button onButtonClicked={buttonClickedHandler} content=\"6\"/>\r\n                <Button onButtonClicked={buttonClickedHandler} content=\"7\"/>\r\n                <Button onButtonClicked={buttonClickedHandler} content=\"8\"/>\r\n                <Button onButtonClicked={buttonClickedHandler} content=\"9\"/>\r\n                <Button onButtonClicked={buttonClickedHandler} content=\"0\"/>\r\n                <Button onButtonClicked={buttonClickedHandler}  content=\"=\"/>\r\n            </div>\r\n            <div className=\"Operations\">\r\n                <Button onButtonClicked={buttonClickedHandler} content=\"c\"/>\r\n                <Button onButtonClicked={buttonClickedHandler}  content=\"+\"/>\r\n                <Button onButtonClicked={buttonClickedHandler}  content=\"-\"/>\r\n                <Button onButtonClicked={buttonClickedHandler}  content=\"x\"/>\r\n                <Button onButtonClicked={buttonClickedHandler}  content=\"/\"/>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default MainCal;","import MainCal from './containers/MainCal';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainCal/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}